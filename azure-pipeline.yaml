trigger:
  branches:
    include: 
    - master
variables:
- group: app-dev-env-variable-group
- group: app-test-env-variable-group
- group: app-prod-env-variable-group

stages:

# Build Stage
- stage: BuildAndTest
  jobs:
  - job: BuildAndTest
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:

    # Create or update the ACR resource DEV
    - task: AzureResourceGroupDeployment@2
      displayName: 'Create Docker Container Registry for DEV' 
      inputs:
        azureSubscription: '$(azureSubscriptionDEV)'
        resourceGroupName: '$(rgNameDEV)'
        location: $(locationDEV)
        csmFile: '$(System.DefaultWorkingDirectory)/**/containerRegistry-template.json'
        overrideParameters: '-registryName "$(acrNameDEV)" -registryLocation "$(locationDEV)" -registrySku standard'

    # Create or update the ACR resource TEST
    - task: AzureResourceGroupDeployment@2
      displayName: 'Create Docker Container Registry for TEST'
      inputs:
        azureSubscription: '$(azureSubscriptionTEST)'
        resourceGroupName: '$(rgNameTEST)'
        location: $(locationTEST)
        csmFile: '$(System.DefaultWorkingDirectory)/**/containerRegistry-template.json'
        overrideParameters: '-registryName "$(acrNameTEST)" -registryLocation "$(locationTEST)" -registrySku standard'
        
    # Create or update the ACR resource PROD
    - task: AzureResourceGroupDeployment@2
      displayName: 'Create Docker Container Registry for PROD'
      inputs:
        azureSubscription: '$(azureSubscriptionPROD)'
        resourceGroupName: '$(rgNamePROD)'
        location: $(locationPROD)
        csmFile: '$(System.DefaultWorkingDirectory)/**/containerRegistry-template.json'
        overrideParameters: '-registryName "$(acrNamePROD)" -registryLocation "$(locationPROD)" -registrySku standard'
   
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: false
        goals: 'package'  

    - task: CopyFiles@2
      displayName: 'Copy Files to artifact staging directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**/target/*.?(war|jar)'
        TargetFolder: $(Build.ArtifactStagingDirectory)
    
   
    # Publish the app
    - task: Maven@3
      displayName: 'Java publish'
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(System.DefaultWorkingDirectory)/PublishedWebApp'
        zipAfterPublish: false

    # Build container image for DEV
    - task: Docker@1
      displayName: 'Build container image DEV'
      inputs:
        azureSubscriptionEndpoint: '$(azureSubscriptionDEV)'
        azureContainerRegistry: '$(acrHostNameDEV)'
        imageName: '$(imageNameDEV):$(Build.BuildId)'

    # Push container image in DEV for ready to use
    - task: Docker@1
      displayName: 'Push container image DEV'
      inputs:   
        azureSubscriptionEndpoint: '$(azureSubscriptionDEV)' 
        azureContainerRegistry: '$(acrHostNameDEV)'  
        command: 'Push an image'
        imageName: '$(imageNameDEV):$(Build.BuildId)'
        
    # Build container image for TEST
    - task: Docker@1
      displayName: 'Build container image TEST'
      inputs:
        azureSubscriptionEndpoint: '$(azureSubscriptionTEST)'
        azureContainerRegistry: '$(acrHostNameTEST)'
        imageName: '$(imageNameTEST):$(Build.BuildId)'

    # Push container image in TEST for ready to use
    - task: Docker@1
      displayName: 'Push container image TEST'
      inputs:   
        azureSubscriptionEndpoint: '$(azureSubscriptionTEST)' 
        azureContainerRegistry: '$(acrHostNameTEST)'  
        command: 'Push an image'
        imageName: '$(imageNameTEST):$(Build.BuildId)'
        
    # Build container image for PROD
    - task: Docker@1
      displayName: 'Build container image for PROD'
      inputs:
        azureSubscriptionEndpoint: '$(azureSubscriptionPROD)'
        azureContainerRegistry: '$(acrHostNamePROD)'
        imageName: '$(imageNamePROD):$(Build.BuildId)'

    # Push container image in PROD for ready to use
    - task: Docker@1
      displayName: 'Push container image in PROD'
      inputs:   
        azureSubscriptionEndpoint: '$(azureSubscriptionPROD)' 
        azureContainerRegistry: '$(acrHostNamePROD)'  
        command: 'Push an image'
        imageName: '$(imageNamePROD):$(Build.BuildId)'


      # Copy ARM templates
    - task: CopyFiles@2
      displayName: 'Copy ARM templates'
      inputs:
        SourceFolder: ARMTemplates
        TargetFolder: '$(build.artifactstagingdirectory)'

    # Publish the app as an artifact
    - publish: $(Build.StagingDirectory)
      artifact: app

# Staging DEV
- stage: DevDeployment
  displayName: 'Deploy to DEV environment'
  condition: succeeded()
  dependsOn: BuildAndTest
  
  jobs:
  - job: DevDeployment    
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    # Don't clone the repo
    - checkout: none

    # Download the published application artifact
    - download: current
      artifact: app

    # Create or update Azure App Service for dev environment
    - task: AzureResourceGroupDeployment@2
      displayName: 'Azure Deployment:Create Azure App Service for DEV'
      inputs:
        azureSubscription: '$(azureSubscriptionDEV)'
        resourceGroupName: '$(rgNameDEV)'
        location: '$(locationDEV)'
        csmFile: '$(Pipeline.Workspace)/**/container-webapp-template.json'
        overrideParameters: '-webAppName $(webAppNameDEV) -hostingPlanName $(webAppNameDEV) -appInsightsLocation "$(locationDEV)" -sku "S1 Standard" -registryName $(acrNameDEV) -registryLocation "$(locationDEV)" -registrySku standard -imageName $(imageNameDEV):$(Build.BuildId)'

      # Create or update MySQL Database for dev environment
    - task: AzureResourceManagerTemplateDeployment@3
      displayName: 'Create or update MySQL Database for DEV'
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: '$(azureSubscriptionDEV)'
        subscriptionId: '$(subscriptionIdDEV)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(rgNameDEV)'
        location: 'West Europe'
        templateLocation: 'Linked artifact'
        csmFile: '$(Pipeline.Workspace)/**/mySQLdatabase-template.json'
        csmParametersFile: '$(Pipeline.Workspace)/**/mySQLdatabase-parameter.json'
        overrideParameters: '-serverName $(mySqlServerNameDEV) -sqlDBName $(mySqlDBNameDEV)'
        deploymentMode: 'Incremental'  

    # Deploy App Service in dev environment
    - task: AzureRmWebAppDeployment@3
      displayName: 'Deploy Azure App Service for DEV'
      inputs:
        azureSubscription: '$(azureSubscriptionDEV)'
        appType: applinux
        WebAppName: $(webAppNameDEV)
        DockerNamespace: $(acrHostNameDEV)
        DockerRepository: $(webAppNameDEV)
        DockerImageTag: '$(Build.BuildId)'
        WebAppUri: webAppUrl
        TakeAppOfflineFlag: true
        UseWebDeploy: true
        RenameFilesFlag: true
        
        
# Staging TEST
- stage: TESTDeployment
  displayName: 'Deploy to Test environment'
  condition: succeeded()
  dependsOn: DevDeployment
  jobs:
  - job: TESTDeployment
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    # Don't clone the repo
    - checkout: none

    # Download the published application artifact
    - download: current
      artifact: app

    # Create or update Azure App Service for TEST environment
    - task: AzureResourceGroupDeployment@2
      displayName: 'Azure Deployment:Create Azure App Service for Test environment'
      inputs:
        azureSubscription: '$(azureSubscriptionTEST)'
        resourceGroupName: '$(rgNameTEST)'
        location: '$(locationTEST)'
        csmFile: '$(Pipeline.Workspace)/**/container-webapp-template.json'
        overrideParameters: '-webAppName $(webAppNameTEST) -hostingPlanName $(webAppNameTEST) -appInsightsLocation "$(locationTEST)" -sku "S1 Standard" -registryName $(acrNameTEST) -registryLocation "$(locationTEST)" -registrySku standard -imageName $(imageNameTEST):$(Build.BuildId)'

    # Create or update MySQL Database for TEST environment
    - task: AzureResourceManagerTemplateDeployment@3
      displayName: 'Create or update MySQL Database for TEST'
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: '$(azureSubscriptionTEST)'
        subscriptionId: '$(subscriptionIdTEST)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(rgNameTEST)'
        location: 'West Europe'
        templateLocation: 'Linked artifact'
        csmFile: '$(Pipeline.Workspace)/**/mySQLdatabase-template.json'
        csmParametersFile: '$(Pipeline.Workspace)/**/mySQLdatabase-parameter.json'
        overrideParameters: '-serverName $(mySqlServerNameTEST) -sqlDBName $(mySqlDBNameTEST)'
        deploymentMode: 'Incremental'  

    # Deploy App Service in  TEST environment
    - task: AzureRmWebAppDeployment@3
      displayName: 'Deploy Azure App Service in TEST environment'
      inputs:
        azureSubscription: '$(azureSubscriptionTEST)'
        appType: applinux
        WebAppName: $(webAppNameTEST)
        DockerNamespace: $(acrHostNameTEST)
        DockerRepository: $(webAppNameTEST)
        DockerImageTag: '$(Build.BuildId)'
        WebAppUri: webAppUrl
        TakeAppOfflineFlag: true
        UseWebDeploy: true
        RenameFilesFlag: true
        
                
# Staging PROD
- stage: PRODDeployment
  displayName: 'Deploy to PROD environment'
  condition: succeeded()
  dependsOn: TESTDeployment
  jobs:
  - job: PRODDeployment
    
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    # Don't clone the repo
    - checkout: none

    # Download the published application artifact
    - download: current
      artifact: app

    # Create or update Azure App Service for PROD environment
    - task: AzureResourceGroupDeployment@2
      displayName: 'Azure Deployment:Create Azure App Service for PROD environment'
      inputs:
        azureSubscription: '$(azureSubscriptionPROD)'
        resourceGroupName: '$(rgNamePROD)'
        location: '$(locationPROD)'
        csmFile: '$(Pipeline.Workspace)/**/container-webapp-template.json'
        overrideParameters: '-webAppName $(webAppNamePROD) -hostingPlanName $(webAppNamePROD) -appInsightsLocation "$(locationPROD)" -sku "S1 Standard" -registryName $(acrNamePROD) -registryLocation "$(locationPROD)" -registrySku standard -imageName $(imageNamePROD):$(Build.BuildId)'

      # Create or update MySQL Database for PROD environment
    - task: AzureResourceManagerTemplateDeployment@3
      displayName: 'Create or update MySQL Database for PROD'
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: '$(azureSubscriptionPROD)'
        subscriptionId: '$(subscriptionIdPROD)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(rgNamePROD)'
        location: 'West Europe'
        templateLocation: 'Linked artifact'
        csmFile: '$(Pipeline.Workspace)/**/mySQLdatabase-template.json'
        csmParametersFile: '$(Pipeline.Workspace)/**/mySQLdatabase-parameter.json'
        overrideParameters: '-serverName $(mySqlServerNamePROD) -sqlDBName $(mySqlDBNamePROD)'
        deploymentMode: 'Incremental'  

    # Deploy App Service in  PROD environment
    - task: AzureRmWebAppDeployment@3
      displayName: 'Deploy Azure App Service in PROD environment'
      inputs:
        azureSubscription: '$(azureSubscriptionPROD)'
        appType: applinux
        WebAppName: $(webAppNamePROD)
        DockerNamespace: $(acrHostNamePROD)
        DockerRepository: $(webAppNamePROD)
        DockerImageTag: '$(Build.BuildId)'
        WebAppUri: webAppUrl
        TakeAppOfflineFlag: true
        UseWebDeploy: true
        RenameFilesFlag: true
